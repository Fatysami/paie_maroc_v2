
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AbsencesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  date_debut: 'date_debut',
  date_fin: 'date_fin',
  heure_debut: 'heure_debut',
  heure_fin: 'heure_fin',
  nombre_jours: 'nombre_jours',
  type_absence: 'type_absence',
  statut: 'statut',
  motif: 'motif',
  motif_refus: 'motif_refus',
  justificatif_url: 'justificatif_url',
  justificatif_requis: 'justificatif_requis',
  justificatif_valide: 'justificatif_valide',
  date_validite_justificatif: 'date_validite_justificatif',
  declare_par: 'declare_par',
  remunere: 'remunere',
  taux_remuneration: 'taux_remuneration',
  impact_cnss: 'impact_cnss',
  impact_amo: 'impact_amo',
  retenue_salaire: 'retenue_salaire',
  commentaire_rh: 'commentaire_rh',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AvantagesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  nom: 'nom',
  type: 'type',
  valeur: 'valeur',
  description: 'description',
  date_debut: 'date_debut',
  date_fin: 'date_fin',
  actif: 'actif',
  created_at: 'created_at'
};

exports.Prisma.Bulletins_paieScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  mois: 'mois',
  annee: 'annee',
  date_generation: 'date_generation',
  date_paiement: 'date_paiement',
  salaire_base: 'salaire_base',
  total_primes: 'total_primes',
  total_avantages: 'total_avantages',
  total_retenues: 'total_retenues',
  montant_brut: 'montant_brut',
  montant_net: 'montant_net',
  cnss_employee: 'cnss_employee',
  cnss_employer: 'cnss_employer',
  amo_employee: 'amo_employee',
  amo_employer: 'amo_employer',
  cimr_employee: 'cimr_employee',
  cimr_employer: 'cimr_employer',
  impot_revenu: 'impot_revenu',
  statut: 'statut',
  pdf_url: 'pdf_url',
  genere_par: 'genere_par',
  valide_par: 'valide_par',
  date_validation: 'date_validation',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  siret: 'siret',
  sector: 'sector',
  address: 'address',
  email: 'email',
  phone: 'phone',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CompetencesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  nom: 'nom',
  niveau: 'niveau',
  certifie: 'certifie',
  date_obtention: 'date_obtention'
};

exports.Prisma.Criteres_evaluationScalarFieldEnum = {
  id: 'id',
  evaluation_id: 'evaluation_id',
  nom: 'nom',
  description: 'description',
  poids: 'poids',
  note: 'note',
  commentaire: 'commentaire'
};

exports.Prisma.Demandes_congesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  type_conge_id: 'type_conge_id',
  date_debut: 'date_debut',
  date_fin: 'date_fin',
  nombre_jours: 'nombre_jours',
  statut: 'statut',
  commentaire: 'commentaire',
  justificatif_url: 'justificatif_url',
  validation_manager_id: 'validation_manager_id',
  validation_manager_date: 'validation_manager_date',
  validation_rh_id: 'validation_rh_id',
  validation_rh_date: 'validation_rh_date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DiplomesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  nom: 'nom',
  etablissement: 'etablissement',
  date_obtention: 'date_obtention',
  niveau: 'niveau'
};

exports.Prisma.Documents_employesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  nom: 'nom',
  type: 'type',
  description: 'description',
  file_name: 'file_name',
  file_size: 'file_size',
  file_url: 'file_url',
  mime_type: 'mime_type',
  date_upload: 'date_upload',
  date_expiration: 'date_expiration',
  obligatoire: 'obligatoire',
  status: 'status',
  uploaded_by: 'uploaded_by',
  created_at: 'created_at'
};

exports.Prisma.Elements_paieScalarFieldEnum = {
  id: 'id',
  bulletin_id: 'bulletin_id',
  type: 'type',
  nom: 'nom',
  base_calcul: 'base_calcul',
  taux: 'taux',
  montant: 'montant',
  ordre_affichage: 'ordre_affichage'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  matricule: 'matricule',
  nom: 'nom',
  prenom: 'prenom',
  cin: 'cin',
  email: 'email',
  telephone: 'telephone',
  rue: 'rue',
  ville: 'ville',
  code_postal: 'code_postal',
  pays: 'pays',
  date_embauche: 'date_embauche',
  date_fin_contrat: 'date_fin_contrat',
  poste: 'poste',
  departement: 'departement',
  type_contrat: 'type_contrat',
  duree_contrat: 'duree_contrat',
  periode_essai_debut: 'periode_essai_debut',
  periode_essai_fin: 'periode_essai_fin',
  salaire_base: 'salaire_base',
  salaire_brut: 'salaire_brut',
  mode_paiement: 'mode_paiement',
  heures_travail_hebdo: 'heures_travail_hebdo',
  rib: 'rib',
  banque: 'banque',
  numero_cnss: 'numero_cnss',
  affiliation_cnss_amo: 'affiliation_cnss_amo',
  affiliation_cimr: 'affiliation_cimr',
  taux_cimr: 'taux_cimr',
  status: 'status',
  evaluation_score: 'evaluation_score',
  risque_turnover: 'risque_turnover',
  situation_familiale: 'situation_familiale',
  manager_id: 'manager_id',
  avatar_url: 'avatar_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EvaluationsScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  type: 'type',
  titre: 'titre',
  description: 'description',
  date_prevue: 'date_prevue',
  date_realisation: 'date_realisation',
  status: 'status',
  note_globale: 'note_globale',
  commentaire_employe: 'commentaire_employe',
  commentaire_manager: 'commentaire_manager',
  commentaire_rh: 'commentaire_rh',
  prime_recommandee: 'prime_recommandee',
  augmentation_recommandee: 'augmentation_recommandee',
  risque_turnover: 'risque_turnover',
  potentiel: 'potentiel',
  signature_employe: 'signature_employe',
  signature_manager: 'signature_manager',
  cree_par: 'cree_par',
  valide_par: 'valide_par',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Formations_recommandeesScalarFieldEnum = {
  id: 'id',
  evaluation_id: 'evaluation_id',
  nom: 'nom',
  description: 'description',
  priorite: 'priorite'
};

exports.Prisma.ObjectifsScalarFieldEnum = {
  id: 'id',
  evaluation_id: 'evaluation_id',
  description: 'description',
  atteint: 'atteint',
  commentaire: 'commentaire'
};

exports.Prisma.PrimesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  nom: 'nom',
  montant: 'montant',
  type: 'type',
  frequence: 'frequence',
  base_calcul: 'base_calcul',
  description: 'description',
  date_debut: 'date_debut',
  date_fin: 'date_fin',
  actif: 'actif',
  created_at: 'created_at'
};

exports.Prisma.RetenuesScalarFieldEnum = {
  id: 'id',
  employe_id: 'employe_id',
  nom: 'nom',
  montant: 'montant',
  type: 'type',
  obligatoire: 'obligatoire',
  details: 'details',
  date_debut: 'date_debut',
  date_fin: 'date_fin',
  actif: 'actif',
  created_at: 'created_at'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  plan: 'plan',
  status: 'status',
  start_date: 'start_date',
  end_date: 'end_date',
  billing_cycle: 'billing_cycle',
  payment_provider_id: 'payment_provider_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Types_congesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  nom: 'nom',
  duree_standard: 'duree_standard',
  modifiable: 'modifiable',
  impact_salaire: 'impact_salaire',
  couleur: 'couleur',
  description: 'description',
  limite: 'limite',
  actif: 'actif',
  legal: 'legal',
  created_at: 'created_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  company_id: 'company_id',
  first_name: 'first_name',
  last_name: 'last_name',
  is_active: 'is_active',
  last_login: 'last_login',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VirementsScalarFieldEnum = {
  id: 'id',
  bulletin_id: 'bulletin_id',
  employe_id: 'employe_id',
  montant: 'montant',
  reference: 'reference',
  statut: 'statut',
  date_execution: 'date_execution',
  motif_rejet: 'motif_rejet',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  absences: 'absences',
  avantages: 'avantages',
  bulletins_paie: 'bulletins_paie',
  companies: 'companies',
  competences: 'competences',
  criteres_evaluation: 'criteres_evaluation',
  demandes_conges: 'demandes_conges',
  diplomes: 'diplomes',
  documents_employes: 'documents_employes',
  elements_paie: 'elements_paie',
  employees: 'employees',
  evaluations: 'evaluations',
  formations_recommandees: 'formations_recommandees',
  objectifs: 'objectifs',
  primes: 'primes',
  retenues: 'retenues',
  subscriptions: 'subscriptions',
  types_conges: 'types_conges',
  users: 'users',
  virements: 'virements'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
